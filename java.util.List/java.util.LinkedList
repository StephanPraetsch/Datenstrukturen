java.util.LinkedList<E>

* double linked
* erlaubt null 
* operationen mit index traversieren durch die gesamte liste (beginnend vorne oder hinten)
* nicht thread-safe
* fail-fast iteratoren
* TODO lieber ArrayList nehmen http://docs.oracle.com/javase/tutorial/collections/implementations/list.html
** Most of the time, you'll probably use ArrayList
** ArrayList can take advantage of System.arraycopy
** ArrayList is usually faster
** ArrayList has one tuning parameter â€” the initial capacity
* Deque Eigenschaften sind das herausstechenden: addFirst, getFirst, removeFirst, addLast, getLast, und removeLast

Wann LinkedList?
Wenn man die Liste als Deque benutzt.
Wenn oft remove(Object) genutzt wird (schneller als ArrayList.remove(Object))


Laufzeiten:

add:            O(1)
remove(Object): O(1)
remove(int):    O(n)
get(int)        O(n)
