digraph G {

        rankdir=BT

        node [
                shape = "record"
        ]

        edge [
                arrowhead = "empty"
        ]

	Iterable [label="\<\<interface\>\>\nIterable"]
	Collection [label="\<\<interface\>\>\nCollection"]
	List [label="\<\<interface\>\>\nList"]
	Set [label="\<\<interface\>\>\nSet"]
	Queue [label="\<\<interface\>\>\nQueue"]
	Map [label="\<\<interface\>\>\nMap"]
	Deque [label="\<\<interface\>\>\nDeque"]
	RandomAccess [label="\<\<interface\>\>\nRandomAccess"]
	SortedSet [label="\<\<interface\>\>\nSortedSet"]
	NavigableSet [label="\<\<interface\>\>\nNavigableSet"]
	SortedMap [label="\<\<interface\>\>\nSortedMap"]
	NavigableMap [label="\<\<interface\>\>\nNavigableMap"]
	BlockingQueue [label="\<\<interface\>\>\nBlockingQueue"]
	ConcurrentMap [label="\<\<interface\>\>\nConcurrentMap"]

	{ rank = same; List; Set; Map; Queue; }

	{ 
		rank = same; 
		Vector; ArrayList; LinkedList; HashSet; TreeSet; HashMap; TreeMap;
		ConcurrentHashMap; LinkedBlockingQueue; PriorityQueue;
	}


	Collection -> Iterable
	List -> Collection
	Set -> Collection
	Queue -> Collection
	Vector -> List
	ArrayList -> List
	LinkedList -> List
	Vector -> RandomAccess
	ArrayList -> RandomAccess
	Deque -> Queue
	LinkedList -> Deque
	HashSet -> Set
	SortedSet -> Set
	NavigableSet -> SortedSet
	TreeSet -> NavigableSet
	HashMap -> Map
	SortedMap -> Map
	NavigableMap -> SortedMap
	TreeMap -> NavigableMap
	ConcurrentMap -> Map
	ConcurrentHashMap -> ConcurrentMap
	BlockingQueue -> Queue
	LinkedBlockingQueue -> BlockingQueue
	PriorityQueue -> Queue

}
