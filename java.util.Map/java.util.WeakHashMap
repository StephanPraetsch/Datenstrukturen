* weak keys (als weak reference)
** the presence of a mapping for a given key will not prevent the key from being discarded by the garbage collector
* When a key has been discarded its entry is effectively removed from the map
* value = hard reference
** values sollten nicht (in)direkt auf ihre keys verweisen, sonst werden sie nicht GC't
** workaround: values in WeakReference einpacken
* null key, null value supported
* effizienz wie HashMap
* nicht thread-safe
* fail-fast iterator

TODO
JavaDoc: This class is intended primarily for use with key objects whose equals methods test for object identity using the == operator. Once such a key is discarded it can never be recreated, so it is impossible to do a lookup of that key in a WeakHashMap at some later time and be surprised that its entry has been removed. This class will work perfectly well with key objects whose equals methods are not based upon object identity, such as String instances. With such recreatable key objects, however, the automatic removal of WeakHashMap entries whose keys have been discarded may prove to be confusing.
Ist das  nun für keys mit == oder für equals -Gleichheit gedacht??
